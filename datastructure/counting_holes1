#include <stdio.h>
#include <stdlib.h>

int main(void) {
    int x, y;
    scanf("%d %d", &x, &y);
    
 int ** arr = (int**)malloc(sizeof(int*)*x);
  for (int i = 0; i<x; i++)
     arr[i] = (int*)malloc(sizeof(int)*y);
   
  char arr2[100];
  for (int i = 0; i<x; i++){
     scanf(" %[^\n]", &arr2);
     for (int j = 0; j<y; j++)
        arr[i][j] = arr2[2*j]-'0';   
  }
    int answer = 0;

    int a = 0, b = 0;
    int c = 0, d = 0;
    for (int i = 0; i < x; i++) {
        for (int j = 0; j < y; j++) {
            a = i, b = j;
            //printf("i:%d j:%d\n", i, j);
            if (arr[i][j] == 1 || arr[i][j] == 3)
                b++;
            else { // 0을 만났을 때 0을 따라가면서 3으로 바꾸기
                if (a < x - 1 && b < y - 1 && arr[a][b + 1] == 0 && arr[a + 1][b] == 0 && arr[a + 1][b + 1] == 0) {
                    arr[a][b] = 3;
                    arr[a][b + 1] = 3;
                    arr[a + 1][b] = 3;
                    arr[a + 1][b + 1] = 3;
                    answer++;

                    c = a, d = b;
                    while (1) {
                        if (d > 0 && arr[c][d - 1] == 0) {
                            arr[c][d] = 3;
                            d--;
                        }
                        if (d < y - 1 && arr[c][d + 1] == 0) {
                            arr[c][d] = 3;
                            d++;
                        }
                        else if (c < x - 1 && arr[c + 1][d] == 0) {
                            arr[c][d] = 3;
                            c++;
                            //printf("dir_step:%d step:%d\n", dir_step, step);
                            //printf("2\n");                  
                            if (c < x - 1 && arr[c + 1][d] == 0) {
                                arr[c][d] = 3;
                                c++;
                            }
                        }
                        else if (d > 0 && arr[c][d - 1] == 0) {
                            arr[c][d] = 3;
                            d--;
                            if (c < x - 1 && arr[c + 1][d] == 0) {
                                arr[c][d] = 3;
                                c++;
                            }
                        }
                        else {
                            break;
                        }
                    }
                    c = a, d = b + 1;
                    while (1) {
                        if (d > 0 && arr[c][d - 1] == 0) {
                            arr[c][d] = 3;
                            d--;
                        }
                        if (d < y -1 && arr[c][d + 1] == 0) {
                            arr[c][d] = 3;
                            d++;
                        }
                        else if (c < x - 1 && arr[c + 1][d] == 0) {
                            arr[c][d] = 3;
                            c++;
                            //printf("dir_step:%d step:%d\n", dir_step, step);
                            //printf("2\n");                  
                            if (c < x - 1 && arr[c + 1][d] == 0) {
                                arr[c][d] = 3;
                                c++;
                            }
                        }
                        else if (d > 0 && arr[c][d - 1] == 0) {
                            arr[c][d] = 3;
                            d--;
                            if (c < x - 1 && arr[c + 1][d] == 0) {
                                arr[c][d] = 3;
                                c++;
                            }
                        }
                        else {
                            break;
                        }
                    }
                    c = a + 1, d = b;
                    while (1) {
                        if (d > 0 && arr[c][d - 1] == 0) {
                            arr[c][d] = 3;
                            d--;
                        }
                        if (d < y - 1 && arr[c][d + 1] == 0) {
                            arr[c][d] = 3;
                            d++;
                        }
                        else if (c < x - 1 && arr[c + 1][d] == 0) {
                            arr[c][d] = 3;
                            c++;
                            //printf("dir_step:%d step:%d\n", dir_step, step);
                            //printf("2\n");                  
                            if (c < x - 1 && arr[c + 1][d] == 0) {
                                arr[c][d] = 3;
                                c++;
                            }
                        }
                        else if (d > 0 && arr[c][d - 1] == 0) {
                            arr[c][d] = 3;
                            d--;
                            if (c < x - 1 && arr[c + 1][d] == 0) {
                                arr[c][d] = 3;
                                c++;
                            }
                        }
                        else {
                            break;
                        }
                    }
                    c = a + 1, d = b + 1;
                    while (1) {
                        if (d > 0 && arr[c][d - 1] == 0) {
                            arr[c][d] = 3;
                            d--;
                        }
                        if (d < y - 1 && arr[c][d + 1] == 0) {
                            arr[c][d] = 3;
                            d++;
                        }
                        else if (d > 0 && arr[c][d - 1] == 0) {
                            arr[c][d] = 3;
                            d--;
                            if (c < x - 1 && arr[c + 1][d] == 0) {
                                arr[c][d] = 3;
                                c++;
                            }
                        }
                        else if (c < x - 1 && arr[c + 1][d] == 0) {
                            arr[c][d] = 3;
                            c++;
                            //printf("dir_step:%d step:%d\n", dir_step, step);
                            //printf("2\n");                  
                            if (c < x - 1 && arr[c + 1][d] == 0) {
                                arr[c][d] = 3;
                                c++;
                            }
                        }
                        else {
                            break;
                        }
                    }

                }
            }
        }

    }

    printf("%d", answer);
    return 0;
}
